head(y)
y <- DGEList(counts=rawdata[,2:64], genes=rawdata[,1])
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
nrow(y)
keep <- rowSums(cpm(y)>1) >= 32
y <- y[keep,]
nrow(y)
head(y)
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y, method="TMM")
y$samples
stages <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
species <- factor(c(rep("lyco",21), rep("penn", 21), rep("harb", 21)))
data.frame(Sample=colnames(y), species, stages)
data.frame(colnames(y), species, stages)
cbind(colnames(y), species, stages)
data.frame(Sample=colnames(y), species, stages)
design <- model.matrix(~species+stages)
design <- model.matrix(~species:stages)
Stages <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
Species <- factor(c(rep("lyco",21), rep("penn", 21), rep("harb", 21)))
data.frame(Sample=colnames(y), Species, Stages)
design <- model.matrix(~Species:Stages)
design <- model.matrix(~Species+Species:Stages)
rownames(design) <- colnames(y)
data.frame(Sample=colnames(y), Species, Stages)
y
data.frame(Sample=colnames(y), Species, Stages)
design <- model.matrix(~Species*Stages)
y <- DGEList(counts=rawdata[,2:64], genes=rawdata[,1])
getwd()
setwd("./data")
rawdata <- read.csv("pnas.1402835111.sd01.csv", head=TRUE, sep=",")
# head(rawdata)
y <- DGEList(counts=rawdata[,2:64], genes=rawdata[,1])
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
nrow(y)
keep <- rowSums(cpm(y)>1) >= 32
y <- y[keep,]
#summary(cpm(ly))
nrow(y)
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y, method="TMM")
y$samples
Stages <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
Species <- factor(c(rep("lyco",21), rep("penn", 21), rep("harb", 21)))
data.frame(Sample=colnames(y), Species, Stages)
design <- model.matrix(~Species*Stages)
rownames(design) <- colnames(y)
colnames(data)
colnames(y)
Species <- factor(c(rep("Slyc",21), rep("Spen", 21), rep("Shab", 21)))
data.frame(Sample=colnames(y), Species, Stages)
colnames(y)
design <- model.matrix(~Species*Stages)
design <- model.matrix(~Species*Stages, data=y)
y$samples
target <- data.frame(Sample=colnames(y), Species, Stages)
design <- model.matrix(~Species*Stages, data=target)
design
rownames(design) <- colnames(y)
colnames(design)
design
y$samples
target
design <- model.matrix(~Species+Stages, data=target)
colnames(design)
design <- model.matrix(~Species:Stages, data=target)
colnames(design)
design <- model.matrix(~Stages:Species, data=target)
colnames(design)
rownames(design) <- colnames(y)
rownames(design)
colnames(design)
y <- estimateDisp(y, design, robust=TRUE)
getwd()
setwd("./data")
rawdata <- read.csv("pnas.1402835111.sd01.csv", head=TRUE, sep=",")
# head(rawdata)
y <- DGEList(counts=rawdata[,2:64], genes=rawdata[,1])
## Order transcripts by counts number
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
nrow(y)
## Filtering out lowly expressed genes
keep <- rowSums(cpm(y)>1) >= 32
y <- y[keep,]
#summary(cpm(ly))
nrow(y)
## Estimate library size
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y, method="TMM")
y$samples
y <- estimateDisp(y, design, robust=TRUE)
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y, method="TMM")
y$samples
Stages <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
Species <- factor(c(rep("Slyc",21), rep("Spen", 21), rep("Shab", 21)))
target <- data.frame(Sample=colnames(y), Species, Stages)
design <- model.matrix(~Stages:Species, data=target)
colnames(design)
rownames(design) <- colnames(y)
y <- estimateDisp(y, design, robust=TRUE)
design <- model.matrix(~0+Stages:Species, data=target)
colnames(design)
rownames(design) <- colnames(y)
y <- estimateDisp(y, design, robust=TRUE)
colnames(design)
y$common.dispersion
fit1 <- glmQLFit(y, design)
ltr1 <- glmQLFTest(fit1, coef=1:7)
top1 <- topTags(ltr1, n=30000)
write.csv(top, "./Lyco2_DEX.csv")
write.csv(top1, "./Lyco2_DEX.csv")
ly <- DGEList(counts=rawdata[,2:22], genes=rawdata[,1])
nrow(ly)
o <- order(rowSums(ly$counts), decreasing=TRUE)
ly <- ly[o,]
nrow(ly)
head(ly)
row(ly)
column(ly)
keep <- rowSums(cpm(ly)>1) > 10
keep <- rowSums(cpm(ly)>1) > 10
ly <- ly[keep,]
#summary(cpm(ly))
nrow(ly)
summary(cpm(ly))
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(ly), group)
design <- model.matrix(~group)
rownames(design) <- colnames(ly)
ly$samples$lib.size <- colSums(ly$counts)
ly <- calcNormFactors(ly, method="TMM")
ly$samples
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(ly), group)
design <- model.matrix(~group)
rownames(design) <- colnames(ly)
ly <- estimateDisp(ly, design, robust=TRUE)
ly$common.dispersion
#plotBCV(ly)
fit1 <- glmQLFit(ly, design)
ltr1 <- glmQLFTest(fit1, coef=2:7)
top1 <- topTags(ltr1, n=30000)
write.csv(top, "./Lyco_DEX.csv")
setwd("./")
rawdata <- read.csv("pnas.1402835111.sd01.csv", head=TRUE, sep=",")
# head(rawdata)
ly <- DGEList(counts=rawdata[,2:22], genes=rawdata[,1])
pn <- DGEList(counts=rawdata[,23:43], genes=rawdata[,1])
hb <- DGEList(counts=rawdata[,44:64], genes=rawdata[,1])
setwd("./")
rawdata <- read.csv("pnas.1402835111.sd01.csv", head=TRUE, sep=",")
# head(rawdata)
y <- DGEList(counts=rawdata[,2:64], genes=rawdata[,1])
nrow(y)
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
nrow(y)
keep <- rowSums(cpm(y)>1) > 32
y <- y[keep,]
#summary(cpm(ly))
nrow(y)
## Estimate library size
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y, method="TMM")
y$samples
ly <- DGEList(counts=y[,2:22], genes=y[,1])
pn <- DGEList(counts=y[,23:43], genes=y[,1])
hb <- DGEList(counts=y[,44:64], genes=y[,1])
ly <- DGEList(counts=y[,2:22], genes=y[,1])
ly
ly <- DGEList(counts=y[,1:21], genes=y[,1])
ly
ly <- DGEList(counts=y[,1:21], genes=y[,0])
ly <- DGEList(counts=y[,1:21], genes=colnames(ly))
ly <- DGEList(counts=y[,1:21])
ly
hb <- DGEList(counts=y[,43:63])
hb
pn <- DGEList(counts=y[,22:42])
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(ly), group)
design <- model.matrix(~group)
rownames(design) <- colnames(ly)
ly <- estimateDisp(ly, design, robust=TRUE)
fit1 <- glmQLFit(ly, design)
ltr1 <- glmQLFTest(fit1, coef=2:7)
top1 <- topTags(ltr1, n=30000)
write.csv(top, "./Lyco_DEX.csv")
write.csv(top1, "./Lyco_DEX.csv")
write.csv(top1, "./Lyco_DEX.csv")
data.frame(Sample=colnames(pn), group)
design <- model.matrix(~group)
rownames(design) <- colnames(pn)
pn <- estimateDisp(pn, design, robust=TRUE)
pn$common.dispersion
fit2 <- glmQLFit(pn, design)
ltr2 <- glmQLFTest(fit2, coef=2:7)
top2 <- topTags(ltr2, n=30000)
write.csv(top2, "./Penn_DEX.csv")
pn <- DGEList(counts=y[,22:42])
data.frame(Sample=colnames(pn), group)
design <- model.matrix(~group)
rownames(design) <- colnames(pn)
pn <- estimateDisp(pn, design, robust=TRUE)
pn$common.dispersion
#plotBCV(pn)
fit2 <- glmQLFit(pn, design)
ltr2 <- glmQLFTest(fit2, coef=2:7)
top2 <- topTags(ltr2, n=30000)
write.csv(top2, "./Penn_DEX.csv")
data.frame(Sample=colnames(hb), group)
design <- model.matrix(~group)
rownames(design) <- colnames(hb)
hb <- estimateDisp(hb, design, robust=TRUE)
hb$common.dispersion
#plotBCV(hb)
fit3 <- glmQLFit(hb, design)
ltr3 <- glmQLFTest(fit3, coef=2:7)
top3 <- topTags(ltr3, n=30000)
write.csv(top3, "./Harb_DEX.csv")
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",")
penn <- read.csv("Penn_DEX.csv", head=TRUE, sep=",")
harb <- read.csv("Harb_DEX.csv", head=TRUE, sep=",")
merged = rbind(lyco, penn, harb)
head(merged)
tail(merged)
sorted <- merged[order(merged$FDR), ]
nrow(sorted)
quantile = head(sorted, 2464)
write.csv(quantile, "./target.csv")
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",")[ ,2:]
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", drop =1)
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", drop=c(1))
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA)))
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
lyco
head(lyco)
## Load the data
y <- DGEList(counts=rawdata[,2:64], genes=rawdata[,1])
nrow(y)
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
nrow(y)
## Filtering out lowly expressed genes
keep <- rowSums(cpm(y)>1) > 32
y <- y[keep,]
#summary(cpm(ly))
nrow(y)
## Estimate library size
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y, method="TMM")
y$samples
ly <- DGEList(counts=y[,1:21])
pn <- DGEList(counts=y[,22:42])
hb <- DGEList(counts=y[,43:63])
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(ly), group)
design <- model.matrix(~group)
rownames(design) <- colnames(ly)
ly <- estimateDisp(ly, design, robust=TRUE)
ly$common.dispersion
#plotBCV(ly)
fit1 <- glmQLFit(ly, design)
ltr1 <- glmQLFTest(fit1, coef=2:7)
top1 <- topTags(ltr1, n=30000)
write.csv(top1, "./Lyco_DEX.csv")
## Penn's Data
## Estimate library size
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(pn), group)
design <- model.matrix(~group)
rownames(design) <- colnames(pn)
pn <- estimateDisp(pn, design, robust=TRUE)
pn$common.dispersion
#plotBCV(pn)
fit2 <- glmQLFit(pn, design)
ltr2 <- glmQLFTest(fit2, coef=2:7)
top2 <- topTags(ltr2, n=30000)
write.csv(top2, "./Penn_DEX.csv")
## Harb's Data
data.frame(Sample=colnames(hb), group)
design <- model.matrix(~group)
rownames(design) <- colnames(hb)
hb <- estimateDisp(hb, design, robust=TRUE)
hb$common.dispersion
#plotBCV(hb)
fit3 <- glmQLFit(hb, design)
ltr3 <- glmQLFTest(fit3, coef=2:7)
top3 <- topTags(ltr3, n=30000)
write.csv(top3, "./Harb_DEX.csv")
setwd("./")
rawdata <- read.csv("pnas.1402835111.sd01.csv", head=TRUE, sep=",")
# head(rawdata)
## Load the data
y <- DGEList(counts=rawdata[,2:64], genes=rawdata[,1])
nrow(y)
o <- order(rowSums(y$counts), decreasing=TRUE)
y <- y[o,]
nrow(y)
## Filtering out lowly expressed genes
keep <- rowSums(cpm(y)>1) > 32
y <- y[keep,]
#summary(cpm(ly))
nrow(y)
## Estimate library size
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y, method="TMM")
y$samples
ly <- DGEList(counts=y[,1:21])
pn <- DGEList(counts=y[,22:42])
hb <- DGEList(counts=y[,43:63])
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(ly), group)
design <- model.matrix(~group)
rownames(design) <- colnames(ly)
ly <- estimateDisp(ly, design, robust=TRUE)
ly$common.dispersion
#plotBCV(ly)
fit1 <- glmQLFit(ly, design)
ltr1 <- glmQLFTest(fit1, coef=2:7)
top1 <- topTags(ltr1, n=30000)
write.csv(top1, "./Lyco_DEX.csv")
## Penn's Data
## Estimate library size
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(pn), group)
design <- model.matrix(~group)
rownames(design) <- colnames(pn)
pn <- estimateDisp(pn, design, robust=TRUE)
pn$common.dispersion
#plotBCV(pn)
fit2 <- glmQLFit(pn, design)
ltr2 <- glmQLFTest(fit2, coef=2:7)
top2 <- topTags(ltr2, n=30000)
write.csv(top2, "./Penn_DEX.csv")
## Harb's Data
data.frame(Sample=colnames(hb), group)
design <- model.matrix(~group)
rownames(design) <- colnames(hb)
hb <- estimateDisp(hb, design, robust=TRUE)
hb$common.dispersion
#plotBCV(hb)
fit3 <- glmQLFit(hb, design)
ltr3 <- glmQLFTest(fit3, coef=2:7)
top3 <- topTags(ltr3, n=30000)
write.csv(top3, "./Harb_DEX.csv")
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
penn <- read.csv("Penn_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
harb <- read.csv("Harb_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
merged = rbind(lyco, penn, harb)
head(merged)
setwd("./")
rawdata <- read.csv("pnas.1402835111.sd01.csv", head=TRUE, sep=",")
## Load the data
ly <- DGEList(counts=rawdata[,2:22], genes=rawdata[,1])
pn <- DGEList(counts=rawdata[,23:43], genes=rawdata[,1])
hb <- DGEList(counts=rawdata[,44:64], genes=rawdata[,1])
## Lyco's Data
## Order transcripts by counts number
nrow(ly)
o <- order(rowSums(ly$counts), decreasing=TRUE)
ly <- ly[o,]
nrow(ly)
## Filtering out lowly expressed genes
keep <- rowSums(cpm(ly)>1) > 10
ly <- ly[keep,]
#summary(cpm(ly))
nrow(ly)
## Estimate library size
ly$samples$lib.size <- colSums(ly$counts)
ly <- calcNormFactors(ly, method="TMM")
ly$samples
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(ly), group)
design <- model.matrix(~group)
rownames(design) <- colnames(ly)
ly <- estimateDisp(ly, design, robust=TRUE)
ly$common.dispersion
#plotBCV(ly)
fit1 <- glmQLFit(ly, design)
ltr1 <- glmQLFTest(fit1, coef=2:7)
top1 <- topTags(ltr1, n=30000)
write.csv(top, "./Lyco_DEX.csv")
## Penn's Data
## Order transcripts by counts number
nrow(pn)
o <- order(rowSums(pn$counts), decreasing=TRUE)
pn <- pn[o,]
## Filtering out lowpn expressed genes
keep <- rowSums(cpm(pn)>1) > 10
pn <- pn[keep,]
#summary(cpm(pn))
nrow(pn)
## Estimate library size
pn$samples$lib.size <- colSums(pn$counts)
pn <- calcNormFactors(pn, method="TMM")
pn$samples
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(pn), group)
design <- model.matrix(~group)
rownames(design) <- colnames(pn)
pn <- estimateDisp(pn, design, robust=TRUE)
pn$common.dispersion
#plotBCV(pn)
fit2 <- glmQLFit(pn, design)
ltr2 <- glmQLFTest(fit2, coef=2:7)
top2 <- topTags(ltr2, n=30000)
write.csv(top2, "./Penn_DEX.csv")
## Harb's Data
## Order transcripts by counts number
nrow(hb)
o <- order(rowSums(hb$counts), decreasing=TRUE)
hb <- hb[o,]
## Filtering out lowhb expressed genes
keep <- rowSums(cpm(hb)>1) > 10
hb <- hb[keep,]
#summary(cpm(hb))
nrow(hb)
## Estimate library size
hb$samples$lib.size <- colSums(hb$counts)
hb <- calcNormFactors(hb, method="TMM")
hb$samples
group <- factor(c(rep("P3m",3), rep("P4d", 3), rep("P4p", 3),
rep("P5d", 3), rep("P5p", 3), rep("P6d", 3), rep("P6p", 3)))
data.frame(Sample=colnames(hb), group)
design <- model.matrix(~group)
rownames(design) <- colnames(hb)
hb <- estimateDisp(hb, design, robust=TRUE)
hb$common.dispersion
#plotBCV(hb)
fit3 <- glmQLFit(hb, design)
ltr3 <- glmQLFTest(fit3, coef=2:7)
top3 <- topTags(ltr3, n=30000)
write.csv(top3, "./Harb_DEX.csv")
write.csv(top1, "./Lyco_DEX.csv")
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
penn <- read.csv("Penn_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
harb <- read.csv("Harb_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
lyco
merged = rbind(lyco, penn, harb)
head(merged)
tail(merged)
sorted <- merged[order(merged$FDR), ]
cutoff <- nrow(sorted)/20
cutoff
quantile = head(sorted, cutoff)
write.csv(quantile, "./DEX_genes.csv")
penn$genes <- gsub('Solyc', 'Spenn', penn$genes)
harb$genes <- gsub('Solyc', 'Sharb', harb$genes)
merged = rbind(lyco, penn, harb)
head(merged)
tail(merged)
sorted <- merged[order(merged$FDR), ]
cutoff <- nrow(sorted)/20
quantile = head(sorted, cutoff)
write.csv(quantile, "./DEX_genes.csv")
penn$genes <- gsub('Solyc', 'pen_Solyc', penn$genes)
harb$genes <- gsub('Solyc', 'har_Solyc', harb$genes)
merged = rbind(lyco, penn, harb)
head(merged)
tail(merged)
sorted <- merged[order(merged$FDR), ]
cutoff <- nrow(sorted)/20
quantile = head(sorted, cutoff)
write.csv(quantile, "./DEX_genes.csv")
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
penn <- read.csv("Penn_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
harb <- read.csv("Harb_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
penn$genes <- gsub('Solyc', 'pen_Solyc', penn$genes)
harb$genes <- gsub('Solyc', 'har_Solyc', harb$genes)
merged = rbind(lyco, penn, harb)
head(merged)
tail(merged)
sorted <- merged[order(merged$FDR), ]
cutoff <- nrow(sorted)/20
quantile = head(sorted, cutoff)
write.csv(quantile, "./DEX_genes.csv")
lyco <- read.csv("Lyco_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
penn <- read.csv("Penn_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
harb <- read.csv("Harb_DEX.csv", head=TRUE, sep=",", colClasses=c("NULL",NA,NA,NA))
lyco$genes <- gsub('Solyc', 'lyc_Solyc', lyco$genes)
penn$genes <- gsub('Solyc', 'pen_Solyc', penn$genes)
harb$genes <- gsub('Solyc', 'har_Solyc', harb$genes)
merged = rbind(lyco, penn, harb)
head(merged)
tail(merged)
sorted <- merged[order(merged$FDR), ]
cutoff <- nrow(sorted)/20
quantile = head(sorted, cutoff)
write.csv(quantile, "./DEX_genes.csv")
write.csv(quantile, "./DEX_genes.csv")
length(grep("lyc_", quantile))
length(which(quantile == "lyc_"))
