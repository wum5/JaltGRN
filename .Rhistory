data(iris)
head(iris, 3)
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
print(ir.pca)
plot(ir.pca, type = "l")
summary(ir.pca)
predict(ir.pca,
newdata=tail(log.ir, 2))
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
PC = predict(trans, iris[,1:4])
head(PC, 3)
trans$rotation
require(caret)
trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
PC = predict(trans, iris[,1:4])
head(PC, 3)
trans$rotation
summary(ir.pca)
summary(trans)
summary(ir.pca)
log.ir
print trans$rotation
print(trans$rotation)
print(trans)
plot(trans, type = "l")
plot(trans$rotation, type = "l")
jalt <- read.csv("./data/DEX_genes.csv", head=TRUE, sep=",")
head(jalt[,6:26])
getwd()
setwd("./Network")
jalt <- read.csv("./data/DEX_genes.csv", head=TRUE, sep=",")
head(jalt[,6:26])
jalt <- jalt[,6:26]
ir.pca <- prcomp(jalt,
center = TRUE,
scale. = TRUE)
print(ir.pca)
# plot method
plot(ir.pca, type = "l")
# summary method
summary(ir.pca)
# Predict PCs
predict(ir.pca,
newdata=tail(log.ir, 2))
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
rm(list=ls())
trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
PC = predict(trans, iris[,1:4])
head(PC, 3)
trans$rotation
print(trans)
data(iris)
head(iris, 3)
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
ir.pca <- prcomp(trans)
log.ir
trans
PC
ir.pca
# advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,
center = TRUE,
scale. = TRUE)
ir.pca
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
plot(trans)
plot(trans$rotation)
trans
trans$rotation
g <- ggbiplot(trans$rotation, obs.scale = 1, var.scale = 1,
groups = ir.species, ellipse = TRUE,
circle = TRUE)
iris.trans = preProcess(iris[,1:4],
method=c("BoxCox", "center",
"scale", "pca"))
iris.pca <- prcomp(iris.preproc,center = FALSE)
iris.preproc <- predict(iris.trans,newdata = iris.cntn)
iris.preproc <- predict(iris.trans,newdata = iris[,1:4])
iris.pca <- prcomp(iris.preproc,center = FALSE)
iris.pca
rm(list=ls())
data(iris)
head(iris, 3)
ir.species <- iris[, 5]
require(caret)
iris.trans <- preProcess(x = iris[, 1:4],method = c("BoxCox","center","scale"))
iris.trans
iris.preproc <- predict(iris.trans,newdata = iris[,1:4])
iris.pca
iris.pca <- prcomp(iris.preproc,center = FALSE)
iris.pca
summary(iris.pca)
pcaCharts(iris.pca)
install.packages("pcaCharts")
library(pcacharts)
library(pcaCharts)
pcaCharts(iris.pca)
library(pcaCharts)
install.packages("pcaCharts")
library(pcaCharts)
require(pcaCharts)
pcaCharts(iris.pca)
summary(iris.pca)
print(ir.pca)
print(iris.pca)
plot(iris.pca, type = "l")
g <- ggbiplot(iris.pca, obs.scale = 1, var.scale = 1,
groups = iris.pca.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
iris.species <- iris[, 5]
g <- ggbiplot(iris.pca, obs.scale = 1, var.scale = 1,
groups = iris.pca.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(iris.pca, obs.scale = 1, var.scale = 1,
groups = iris.species, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
rm(list=ls())
jalt <- read.csv("./data/DEX_genes.csv", head=TRUE, sep=",")
head(jalt[,6:26])
jalt <- jalt[,6:26]
jalt.trans <- preProcess(x = jalt[,6:26],method = c("BoxCox","center","scale"))
jalt.trans
rm(list=ls())
jalt <- read.csv("./data/DEX_genes.csv", head=TRUE, sep=",")
head(jalt[,6:26])
jalt.trans <- preProcess(x = jalt[,6:26],method = c("BoxCox","center","scale"))
jalt.trans
jalt.preproc <- predict(jalt.trans,newdata = jalt[,6:26])
jalt.pca <- prcomp(jalt.preproc,center = FALSE)
jalt.pca
summary(jalt.pca)
plot(jalt.pca, type = "l")
g <- ggbiplot(jalt.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE)
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(jalt.pca, obs.scale = 1, var.scale = 1)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(jalt.pca)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(jalt.pca, obs.scale = 1, var.scale = 1)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(jalt.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
rm(list=ls())
rm(list=ls())
jalt <- read.csv("./data/DEX_genes.csv", head=TRUE, sep=",")
head(jalt[,6:26])
jalt.trans <- preProcess(x = jalt[,6:26],method = c("BoxCox","center","scale"))
jalt.trans
jalt.preproc <- predict(jalt.trans,newdata = jalt[,6:26])
jalt.pca <- prcomp(jalt.preproc,center = TRUE,scale. = TRUE)
jalt.pca
summary(jalt.pca)
plot(jalt.pca, type = "l")
g <- ggbiplot(jalt.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
